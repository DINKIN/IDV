***********************************************************************
The release environment:

On conan all release oriented dirs and files point through the 
symbolic link:
/content/software/idv/current

So we have(in an abbreviated way):                            
/content/software/idv/data  --> current/data
/content/software/idv/docs  --> current/docs
/content/software/idv/webstart/IDV  --> current/webstart/IDV

Run the test suite (see below) and make sure to update and
check in /ucar/unidata/idv/resources/version.properties.

When you are ready to make a release, run:

cd /upc/share/idv/build
./buildIdv release

That will run the build, generate the installers, move all relevant files 
(installers, docs, webstart) to conan.  The following directories will be
created:

/content/software/idv/<version>
/content/downloads/idv/<version>

Then (see below):

  Update the downloads/idv/toc.xml (see below)

  Expand the javadoc (see below).

  Generate the User Guide and Workshop PDFs (see below)

  Update the index.html page (see below).

  branch the SVN repository

  change the /content/software/idv/current to point to the new release.

***********************************************************************
Update the downloads toc.xml page

On conan:

cd /content/downloads/idv
edit the toc.xml
  - change the %version% property value
  - change where the current and previous point to
change the current link to point to the new release.

***********************************************************************
Expand the javadoc

cd /content/software/idv/<release>/docs
jar xvf ~ftp/pub/idv/<version>/idv_javadoc_<version>.jar
cd idv/docs
mv javadoc ../..
cd ../..
rm -rf META-INF/ idv

***********************************************************************
Generate the PDFs

You  need to build the userguide.pdf and workshop.pdf files.
To do this you need to be on harpo (which has the htmldoc executable)
and run:
ant docs_pdf
from /upc/share/idv/ucar
This will generate the userguide.pdf and workshop.pdf and place them in the
docs directory.

Once this is done, copy them to conan:
 
/content/software/idv/<release>/docs/userguide/userguide.pdf
/content/software/idv/<release>/docs/workshop/workshop.pdf

***********************************************************************
Changing the index.html page

cd /content/software/idv/<version>
cp ../<previous_version>/index.html index.html.<version>
edit the index.html.<version> file and update the IDV News and Announcements
section with information about the new release.
cp index.html.<version> index.html

(If you have to redo the release, index.html will get overwritten.  That's why
we make the edits in index.html.<version>)

Open http://www.unidata.ucar.edu/software/idv/<version> in a web browser.
Test all the links to the docs.  Fix any broken links.

***********************************************************************
Branch the SVN repository:

After the release of a version, you should make a brand in the SVN repository
in case changes are needed later.  To branch the SVN repository,
run:

svn copy svn://zero/idv/trunk svn://zero/idv/branches/IDV_<version>

where <version> is the version (no periods, e.g., 2_8).

***********************************************************************
Running the test suite

Of course, running the tests should come first but  it comes last in the README
due to its length.

The cliff notes version of this section, i.e., to run the full 
test suite on the results of the build simply:
cd /upc/share/idv/lib
tclsh /upc/share/idv/test/runtest.tcl 

And look at:
/upc/share/idv/lib/results.html
 
It is probably best to do this on harpo since the original archive images
are generated on harpo. This should minimize false differences.


The longer version:

The set of test archives are in:
/upc/share/idv/test/archives
Each archive has a directory there, e.g., dem, elnino, eta1, etc.
The script:
/upc/share/idv/test/runtest.tcl
runs the set of tests. You can give it the full directory name of a 
test archive to run just one test:
tclsh /upc/share/idv/test/runtest.tcl /upc/share/idv/test/archives/eta1
or as a short hand:
tclsh /upc/share/idv/test/runtest.tcl eta1

If no archive directories  are given on the command line it will run through
all of the archives in /upc/share/idv/test/archives

The version of the idv that is used depends on where you are when you 
run the test. If there is an idv.jar in the current working directory
then the script will run:
java -jar idv.jar
else it will run from the classpath:
java ucar.unidata.idv.DefaultIdv


The script will iterate through the test archives. For each on it will run
the idv in test mode and tell the idv to write to the <archive name>_results
directory. The script will then compare the generated images in the
original archive with the generated images in the _results directory.
The script produces 3 output files in the working directory:
   
        results.html  resultsLeft.html  resultsRight.html

Results is a frame set that contains resultsLeft.html and resultsRight.html
Any stderr output is shown in resultsRight.html in red.
resultsLeft.html  highlights the images that differ. 
Note: We just do a "diff image1 image2" on the images. So
it is always the case that we pick up differences between some of the 
images.


To create a test archive enable the "Test" menu. There should be 
a "Write Test Archive" entry. Select that and you will be prompted
for an archive name, an optional text description and the directory
to place the archive in. Select /upc/share/idv/test/archives.
